Document Title,Abstract,Year,PDF Link,Authors,Source,abs,label,code,time
Cross versus Within-Company Cost Estimation Studies: A Systematic Review,"The objective of this paper is to determine under what circumstances individual organizations would be able to rely on cross-company-based estimation models. We performed a systematic review of studies that compared predictions from cross-company models with predictions from within-company models based on analysis of project data. Ten papers compared cross-company and within-company estimation models; however, only seven presented independent results. Of those seven, three found that cross-company models were not significantly different from within-company models, and four found that cross-company models were significantly worse than within-company models. Experimental procedures used by the studies differed making it impossible to undertake formal meta-analysis of the results. The main trend distinguishing study results was that studies with small within-company data sets (i.e., $20 projects) that used leave-one-out cross validation all found that the within-company model was significantly different (better) from the cross-company model. The results of this review are inconclusive. It is clear that some organizations would be ill-served by cross-company models whereas others would benefit. Further studies are needed, but they must be independent (i.e., based on different data bases or at least different single company data sets) and should address specific hypotheses concerning the conditions that would favor cross-company or within-company models. In addition, experimenters need to standardize their experimental procedures to enable formal meta-analysis, and recommendations are made in Section 3.",2007,http://ieeexplore.ieee.org/abstract/document/4160970/,"By Barbara A. Kitchenham , Emilia Mendes , Guilherme H. Travassos","Found in: IEEE Transactions on Software Engineering ,Issue Date:May 2007 
pp. 316-329",yes,yes,yes,1
A Systematic Review of Software Development Cost Estimation Studies,"This paper aims to provide a basis for the improvement of software-estimation research through a systematic review of previous work. The review identifies 304 software cost estimation papers in 76 journals and classifies the papers according to research topic, estimation approach, research approach, study context and data set. A Web-based library of these cost estimation papers is provided to ease the identification of relevant estimation research results. The review results combined with other knowledge provide support for recommendations for future software cost estimation research, including: 1) increase the breadth of the search for relevant studies, 2) search manually for relevant papers within a carefully selected set of journals when completeness is essential, 3) conduct more studies on estimation methods commonly used by the software industry, and 4) increase the awareness of how properties of the data sets impact the results when evaluating estimation methods",2007,http://ieeexplore.ieee.org/abstract/document/4027147/,"By Magne Jorgensen , Martin Shepperd","Found in: IEEE Transactions on Software Engineering ,Issue Date:January 2007 
pp. 33-53",yes,yes,yes,1
A Survey of Controlled Experiments in Software Engineering,"The classical method for identifying cause-effect relationships is to conduct controlled experiments. This paper reports upon the present state of how controlled experiments in software engineering are conducted and the extent to which relevant information is reported. Among the 5,453 scientific articles published in 12 leading software engineering journals and conferences in the decade from 1993 to 2002, 103 articles (1.9 percent) reported controlled experiments in which individuals or teams performed one or more software engineering tasks. This survey quantitatively characterizes the topics of the experiments and their subjects (number of subjects, students versus professionals, recruitment, and rewards for participation), tasks (type of task, duration, and type and size of application) and environments (location, development tools). Furthermore, the survey reports on how internal and external validity is addressed and the extent to which experiments are replicated. The gathered data reflects the relevance of software engineering experiments to industrial practice and the scientific maturity of software engineering research.",2005,http://ieeexplore.ieee.org/abstract/document/1514443/,"By Dag I.K. Sjoberg , Jo E. Hannay , Ove Hansen , Vigdis By Kampenes , Amela Karahasanovic , Nils-Kristian Liborg , Anette C. Rekdal","Found in: IEEE Transactions on Software Engineering
Issue Date:September 2005 , pp. 733-753",yes,yes,yes,1
A Survey on Software Estimation in the Norwegian Industry,"Abstract:
We provide an overview of the estimation methods that software companies apply to estimate their projects, why those methods are chosen, and how accurate they are. In order to improve estimation accuracy, such knowledge is essential. We conducted an in-depth survey, where information was collected through structured interviews with senior managers from 18 different companies and project managers of 52 different projects. We analyzed information about estimation approach, effort estimation accuracy and bias, schedule estimation accuracy and bias, delivered functionality and other estimation related information. Our results suggest, for example, that average effort overruns are 41%, that the estimation performance has not changed much the last 10-20 years, that expert estimation is the dominating estimation method, that estimation accuracy is not much impacted by use of formal estimation models, and that software managers tend to believe that the estimation accuracy of their company is better than it actually is.",2004,http://ieeexplore.ieee.org/abstract/document/1357904/,"By Kjetil Molokken-Ostvold , Magne Jorgensen , Sinan S. Tanilkan , Hans Gallis , Anette C. Lien , Siw E. Hove","Found in: 10th IEEE International Symposium on Software Metrics (METRICS'04) 
Issue Date:September 2004 , pp. 208-219",yes,yes,yes,1
A Systematic Review of Theory Use in Software Engineering Experiments,"Empirically based theories are generally perceived as foundational to science. However, in many disciplines, the nature, role and even the necessity of theories remain matters for debate, particularly in young or practical disciplines such as software engineering. This article reports a systematic review of the explicit use of theory in a comprehensive set of 103 articles reporting experiments, from of a total of 5,453 articles published in major software engineering journals and conferences in the decade 1993-2002. Of the 103 articles, 24 use a total of 40 theories in various ways to explain the cause-effect relationship(s) under investigation. The majority of these use theory in the experimental design to justify research questions and hypotheses, some use theory to provide post hoc explanations of their results, and a few test or modify theory. A third of the theories are proposed by authors of the reviewed articles. The interdisciplinary nature of the theories used is greater than that of research in software engineering in general. We found that theory use and awareness of theoretical issues are present, but that theory-driven research is, as yet, not a major issue in empirical software engineering. Several articles comment explicitly on the lack of relevant theory. We call for an increased awareness of the potential benefits of involving theory, when feasible. To support software engineering researchers who wish to use theory, we show which of the reviewed articles on which topics use which theories for what purposes, as well as details of the theories' characteristics",2007,http://ieeexplore.ieee.org/abstract/document/4052585/,"By Jo E. Hannay , Dag I.K. Sjoberg , Tore Dyba","Found in: IEEE Transactions on Software Engineering
Issue Date:February 2007 , pp. 87-107",yes,yes,yes,1
A systematic review of Web engineering research,"Abstract:
This paper uses a systematic literature review as means of investigating the rigor of claims arising from Web engineering research. Rigor is measured using criteria combined from software engineering research. We reviewed 173 papers and results have shown that only 5% would be considered rigorous methodologically. In addition to presenting our results, we also provide suggestions for improvement of Web engineering research based on lessons learnt by the software engineering community.",2005,http://ieeexplore.ieee.org/abstract/document/1541857/,By E. Mendes,"Found in: 2005 International Symposium on Empirical Software Engineering, 2005. 
Issue Date:November 2005 , pp. 10 pp.",yes,yes,yes,1
Are Two Heads Better than One? On the Effectiveness of Pair Programming,"Pair programming is a collaborative approach that makes working in pairs rather than individually the primary work style for code development. Because PP is a radically different approach than many developers are used to, it can be hard to predict the effects when a team switches to PP. Because projects focus on different things, this article concentrates on understanding general aspects related to effectiveness, specifically project duration, effort, and quality. Not unexpectedly, our meta-analysis showed that the question of whether two heads are better than one isn't precise enough to be meaningful. Given the evidence, the best answer is ""it depends"" - on both the programmer's expertise and the complexity of the system and tasks to be solved. Two heads are better than one for achieving correctness on highly complex programming tasks. They might also have a time gain on simpler tasks. Additional studies would be useful. For example, further investigation is clearly needed into the interaction of complexity and programmer experience and how they affect the appropriateness of a PP approach; our current understanding of this phenomenon rests chiefly on a single (although large) study. Only by understanding what makes pairs work and what makes them less efficient can we take steps to provide beneficial work conditions, to avoid detrimental conditions, and to avoid pairing altogether when conditions are detrimental. With the right cooks and the right combination of ingredients, the broth has the potential to be very good indeed.",2007,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4375233,"By Tore Dyb? , Erik Arisholm , Dag I.K. Sj?berg , Jo E. Hannay , Forrest Shull","Found in: IEEE Software 
Issue Date:November 2007 , pp. 12-15",yes,yes,yes,1
Do SQA Programs Work - CMM Works. A Meta Analysis,"Many software development professionals and managers of software development organizations are not fully convinced in the profitability of investments for the advancement of SQA systems. The results included in each of the articles we found, cannot lead to general conclusions on the impact of investments in upgrading an SQA system. Our meta analysis was based on CMM level transition (CMMLT) analysis of available publications and was for the seven most common performance metric. The CMMLT analysis is applicable for combined analysis of empirical data from many sources. Each record in our meta analysis database is calculated as ""after-before ratio"", which is nearly free of the studied organization's characteristics. Because the CMM guidelines and SQA requirement are similar, we claim that the results for CMM programs are also applicable to investments in SQA systems. The extensive database of over 1,800 projects from a variety of 19 information sources leading to the meta analysis results - proved that investments in CMM programs and similarly in SQA systems contribute to software development performance.",2005,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1421069,"By Daniel Galin , Moti Avrahami","Found in: IEEE International Conference on Software - Science, Technology & Engineering (SwSTE'05) 
Issue Date:February 2005 
pp. 95-100",yes,yes,yes,1
Are CMM Program Investments Beneficial? Analyzing Past Studies,"CMM experts strongly believe that investments in programs promoting an organization's CMM maturity yield substantial organizational and economic benefits. In particular, they argue that CMM programs that implement software process improvements can provide more benefits",2006,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4012629,"By Daniel Galin , Motti Avrahami","Found in: IEEE Software 
Issue Date:November 2006 
pp. 81-87",yes,yes,yes,1
"Capture-recapture in software inspections after 10 years research - theory, evaluation and application.","Software inspection is a method to detect faults in the early phases of the software life cycle. In order to estimate the number of faults?not?found, capture?recapture was introduced for software inspections in 1992 to estimate remaining faults after an inspection. Since then, several papers have been written in the area, concerning the basic theory, evaluation of models and application of the method. This paper summarizes the work made in capture?recapture for software inspections during these years. Furthermore, and more importantly, the contribution of the papers are classified as?theory,?evaluation?or?application, in order to analyse the performed research as well as to highlight the areas of research that need further work. It is concluded that (1) most of the basic theory is investigated within biostatistics, (2) most software engineering research is performed on evaluation, a majority ending up in recommendation of the Mh?JK model, and (3) there is a need for application experiences. In order to support the application, an inspection process is presented with decision points based on capture?recapture estimates.",2004,http://www.sciencedirect.com/science/article/pii/S0164121203000906,"H. Petersson, T. Thelin, P. Runeson, and C. Wohlin.","Journal of Systems and Software 72 (2):249-264, 2004.",yes,yes,yes,1
A systematic review of statistical power in software engineering experiments.,"Empirically based theories are generally perceived as foundational to science. However, in many disciplines, the nature, role and even the necessity of theories remain matters for debate, particularly in young or practical disciplines such as software engineering. This article reports a systematic review of the explicit use of theory in a comprehensive set of 103 articles reporting experiments, from of a total of 5,453 articles published in major software engineering journals and conferences in the decade 1993-2002. Of the 103 articles, 24 use a total of 40 theories in various ways to explain the cause-effect relationship(s) under investigation. The majority of these use theory in the experimental design to justify research questions and hypotheses, some use theory to provide post hoc explanations of their results, and a few test or modify theory. A third of the theories are proposed by authors of the reviewed articles. The interdisciplinary nature of the theories used is greater than that of research in software engineering in general. We found that theory use and awareness of theoretical issues are present, but that theory-driven research is, as yet, not a major issue in empirical software engineering. Several articles comment explicitly on the lack of relevant theory. We call for an increased awareness of the potential benefits of involving theory, when feasible. To support software engineering researchers who wish to use theory, we show which of the reviewed articles on which topics use which theories for what purposes, as well as details of the theories' characteristics",2007,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4052585,"T. Dyba, V. B. Kampenes, and D. I. K. Sjoberg.","Information and Software Technology 48 (8):745-755, 2006.",yes,yes,yes,1
Software effort estimation terminology: The tower of Babel.,"It is well documented that the software industry suffers from frequent cost overruns. A contributing factor is, we believe, the imprecise estimation terminology in use. A lack of clarity and precision in the use of estimation terms reduces the interpretability of estimation accuracy results, makes the communication of estimates difficult, and lowers the learning possibilities. This paper reports on a structured review of typical software effort estimation terminology in software engineering textbooks and software estimation research papers. The review provides evidence that the term ?effort estimate? is frequently used without sufficient clarification of its meaning, and that estimation accuracy is often evaluated without ensuring that the estimated and the actual effort are comparable. Guidelines are suggested on how to reduce this lack of clarity and precision in terminology.",2006,http://www.sciencedirect.com/science/article/pii/S0950584905000674,"S. Grimstad, M. Jorgensen, and K. Molokken-Ostvold.","Information and Software Technology 48 (4):302-310, 2006.",yes,yes,yes,1
In Search of What We Experimentally Know about Unit Testing,"Gathering evidence in any discipline is a lengthy procedure, requiring experimentation and empirical confirmation to transform information from mere opinion to undisputed fact. Software engineering is a relatively young field and experimental SE is even younger, so undisputed facts are few and far between. Nevertheless, ESE's relevance is growing because experimental results can help practitioners make better decisions. We have aggregated results from unit-testing experiments with the aim of identifying information with some experimental basis that might help practitioners make decisions. Most of the experiments focus on two important characteristics of testing techniques: effectiveness and efficiency. Some other experiments study the quality of test-case sets according to different criteria",2006,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4012628,"By Natalia Juristo , Ana M. Moreno , Sira Vegas , Martin Solari","Found in: IEEE Software 
Issue Date:November 2006 
pp. 72-80",yes,yes,yes,1
Precise Identification of Side-Effect-Free Methods in Java,"Knowing which methods do not have side effects is necessary in a variety of software tools for program understanding, restructuring, optimization, and verification. We present a general approach for identifying side-effect-free methods in Java software. Our technique is parameterized by class analysis and is designed to work on incomplete programs. We present empirical results from two instantiations of the approach, based on rapid type analysis and on points-to analysis. In our experiments with several components, on average 22% of the investigated methods were identified as free of side effects. We also present a precision evaluation which shows that the approach achieves almost perfect precision - i.e., it almost never misses methods that in reality have no side effects. These results indicate that very precise identification of side-effect-free methods is possible with simple and inexpensive analysis techniques, and therefore can be easily incorporated in software tools.",2004,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1357793,By Atanas Rountev,"Found in: 20th IEEE International Conference on Software Maintenance (ICSM'04) 
Issue Date:September 2004 
pp. 82-91",yes,yes,yes,1
Reviewing 25 Years of Testing Technique Experiments,"Mature knowledge allows engineering disciplines the achievement of predictable results. Unfortunately, the type of knowledge used in software engineering can be considered to be of a relatively low maturity, and developers are guided by intuition, fashion or market-speak rather than by facts or undisputed statements proper to an engineering discipline. Testing techniques determine different criteria for selecting the test cases that will be used as input to the system under examination, which means that an effective and efficient selection of test cases conditions the success of the tests. The knowledge for selecting testing techniques should come from studies that empirically justify the benefits and application conditions of the different techniques. This paper analyzes the maturity level of the knowledge about testing techniques by examining existing empirical studies about these techniques. We have analyzed their results, and obtained a testing technique knowledge classification based on their factuality and objectivity, according to four parameters.",2004,https://link.springer.com/article/10.1023%2FB%3AEMSE.0000013513.48963.1b?LI=true,"Natalia Juristo, Ana M. Moreno, Sira Vegas","March 2004 
Empirical Software Engineering,   Volume 9 Issue 1-2 
Publisher: Kluwer Academic Publishers",yes,yes,yes,1
What Do We Know about Defect Detection Methods?,"A survey of defect detection studies comparing inspection and testing techniques yields practical recommendations: use inspections for requirements and design defects, and use testing for code. Evidence-based software engineering can help software practitioners decide which methods to use and for what purpose. EBSE involves defining relevant questions, surveying and appraising avail able empirical evidence, and integrating and evaluating new practices in the target environment. This article helps define questions regarding defect detection techniques and presents a survey of empirical studies on testing and inspection techniques. We then interpret the findings in terms of practical use. The term defect always relates to one or more underlying faults in an artifact such as code. In the context of this article, defects map to single faults",2006,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1628944,"By Per Runeson , Carina Andersson , Thomas Thelin , Anneliese Andrews , Tomas Berling","Found in: IEEE Software Issue Date:May 2006 
pp. 82-90",yes,yes,yes,1
On the success of empirical studies in the international conference on software engineering,"Critiques of the quantity and quality of empirical evaluations in software engineering have existed for quite some time. However such critiques are typically not empirically evaluated. This paper fills this gap by empirically analyzing papers published by ICSE, the prime research conference on Software Engineering. We present quantitative and qualitative results of a quasi-random experiment of empirical evaluations over the lifetime of the conference. Our quantitative results show the quantity of empirical evaluation has increased over 29 ICSE proceedings but we still have room to improve the soundness of empirical evaluations in ICSE proceedings. Our qualitative results point to specific areas of improvement in empirical evaluations.",2006,http://dl.acm.org/citation.cfm?id=1134333,"Carmen Zannier, Grigori Melnik, Frank Maurer","ICSE '06: Proceedings of the 28th international conference on Software engineering, May 2006,  Publisher: ACM",yes,yes,yes,1
