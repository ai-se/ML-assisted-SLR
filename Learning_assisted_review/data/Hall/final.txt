R. Abreu and R. Premraj, “How developer communicationfrequency relates to bug introducing changes,” in Proceedings ofthe joint international and annual ERCIM workshops on Principles ofsoftware evolution (IWPSE) and software evolution (Evol) workshops.ACM, 2009, pp. 153–158. (Paper=1, Status=F, Phase=1)
E. Arisholm and L. B riand, “Predicting fault-prone componentsin a java legacy system,” in Proceedings of the 2006 ACM/IEEEinternational symposium on Empirical software engineering. ACM,2006, pp. 8–17. (Paper=7, Status=F, Phase=4)
E. Arisholm, L. C. Briand, and E. B. Johannessen, “A systematicand comprehensive inve stigation of methods to build and eval-uate fault prediction models,” Journal of Systems and Software,vol. 83, no. 1, pp. 2–17, 2010. (Paper=9, Status=P)
N. Ayewah, W. Pugh, J. Morgenthaler, J. Penix, and Y. Zhou,“Evaluating static analysis defect warnings on production soft-ware,” in Proceedings of the 7th ACM SIGPLAN-SIGSOFT work-shop on Program analysis for software tools and en gineering. ACM,2007, pp. 1–8. (Paper=10, Status=F, Phase=1)
R. Bell, T. Ostrand, and E. Weyuker, “Looking for bugs in allthe right places,” in Procs of the 2006 international symposium onSoftware testing and analysis. ACM, 2006, pp. 61–72. (Paper=11,Status=P)
A. Bernstein, J. Ekan ayake, and M. Pinzger, “Improving defectprediction using temporal features and non linear models,” inNinth international workshop on Principles of software evolution:in conjunction with the 6th ESEC/ F S E joint meeting, ser. IWPSE’07. New York, NY, USA: ACM, 2007, pp. 11–18. (Paper=13,Status=F, Phase=2)
S. Bibi, G. Tsoumakas, I. Stamelos, and I. Vlahvas, “Software de -fect prediction using regression via classi?cation,” in ComputerSystems and Applications, 2006. IEEE International Conference on.,8, 2006, pp. 330 – 336. (Paper=15, Status=P)
D. Binkley, H. Feild, D. Lawrie, and M. Pighin, “Increasingdiversity: Natural language measures for software fault predic-tion,” Journal of Systems and Software, vol. 82, no. 11, pp. 1793–1803, 2009. (Paper=17, S tatus=F, Phase=1)
C. Bird, N. Nagappan, H. Gall, B. Murphy, and P. Devanbu, “Putting it all together: Using socio-technical networks to pre-dict failures,” in 20th International Symposium on Software Relia-bility Engineering. IEEE, 2009, pp. 109–119. (Paper=18, Status=P)
G. Boetticher, Advanced machine learner applications in softwareengineering. Hershey, PA, USA: Idea Group Publishing, 2006, ch.Improving credibility of machine learner models in software en-gineering, pp. 52 – 72. (Paper=19, Status=F, Phase=2, Data=N)
C. Catal, B. Diri, and B. Ozumut, “An arti?cial immune systemapproach for fault prediction in object-oriented software,” inDependability of Computer Systems. DepCoS-RELCOMEX ’07. 2ndInternational Conference on, 2007, pp.238–245. (Paper=23, Sta-tus=F, Phase=2, Data=N)
E. Ceylan, F. Kutlubay, and A. Bener, “Software defect identi?ca-tion using machine learning techniques,” in Software Engineeringand Advanced Applications, 2006. SEAA ’06. 32nd EUROMICROConference on, 2006, pp. 240 –247. (Paper=24, Status=F, Phase=2)
V. U. Challagulla, F. B. Bastani, and I.-L. Yen, “A uni?edframework for defect data analysis using the mbr technique,”in Tools with Arti?cial Intelligence,. ICTAI ’06. 18th IEEE Interna-tional Conference on, nov. 2006, pp. 39 –46. (Paper=25, Status=F,Phase=2, Data=N)
V. Dallmeier and T. Zimmermann, “Extraction of bug local-ization benchmarks from history,” in Proceedings of the twenty-second IEEE/ACM international conference on Automated softwareengineering. ASE ’07., NY, USA: ACM, 2007, pp. 433–436. (Pa-per=30, Status=F, Ph ase=1)
A. B. de Carvalho, A. Pozo, S. Vergilio, and A. Lenz, “Predictingfault proneness of classes through a multiobjective particleswarm optimization algorithm,” in Tools with Arti?cial Intelli-gence, ’08. 20th IEEE International Conference on, vol. 2, 2008, pp.387–394. (Paper=33, Stat us=F, Phase=2, Data=N)
A. B. de Carvalho, A. Pozo, and S. R. Vergilio, “A symbolicfault-prediction model based on multiobjective particle swarmoptimization,” Journal of Systems and Software, vol. 83, no. 5, pp.868–882, 2010. (Paper=34, Status=F, Phase=2, Data=N)
G. Denaro, S. Morasca, and M. Pezzè, “Deriving models ofsoftware fault-proneness,” in P roceedings of the 14th internationalconference on Software engineering and knowledge engineering, ser.SEKE ’02. New York, NY, USA: ACM, 2002, pp. 361–368. (Pa-per=36, Status=F, Phase=2)
K. El Emam, W. Melo, and J. Machado, “Th e prediction of faultyclasses using object-oriented design metrics,” Journal of Systemsand Software, vol. 56, no. 1, pp. 63–75, 2001. (Paper=39, Status=F,Phase=2)
N. Gayatri, S. Nickolas, A. V. Reddy, and R. Chitra, “Perfor-mance analysis of datamining algorithms for software qualityprediction,” in Advances in Recent Technologies in Communicationand Computing, 2009. ARTCom ’09. International Conference on.,2009, pp. 393–395. (Paper=45, Status=F, Phase=2, Data=N)
I. Gondra, “Applying machine learning to software fault-proneness prediction,” Journal of Systems and Software, vol. 81,no. 2, pp. 186–195, 2008. (Paper=46, Status=F, Phase=1)
Y. Higo, K. Murao, S. Kusumoto, and K. Inoue, “Predicting fault-prone modules based on met rics transitions,” in Proceed-ings of the 2008 workshop on Defects in large software systems. ACM,2008, pp. 6–10. (Paper=54, Stat us=F, Phase=1)
D. Hovemeyer and W. Pugh , “Finding bugs is easy,” in Com-panion to the 19th annual ACM SIGPLAN conference on Object-oriented programming systems, languages, and applications, ’, NY,USA: ACM, 2004, pp. 132–136. (Paper=57, Status=F, Phase=3)
L. Hribar and D. Duka, “Software component quality predictionusing knn and fuzzy logic,” in MIPRO, 2010 Proceedings ofthe 33rd International Convention, 2010, pp. 402–408. (Paper=58,Status=F, Phase=1)
L. Jiang, Z. Su, and E. Chiu, “Context-based detection of clone-related bugs,” in Proceedings of the the 6th joint meeting of theEuropean software engineering conference and the ACM SIGSOFTsymposium on The foundations of software engineering, ser. ESEC-FSE ’07. New York, NY, USA: ACM, 2007, pp . 55–64. (Paper=60,Status=F, Phase=1)
Y. Jiang, B . Cukic, and Y. Ma, “Techniques for evaluating faultprediction models,” Empirical Software Engineering, vol. 13, no. 5,pp. 561–595, 2008. (Paper=61, Status=F, Phase=2, Data=N)
J. A. Jones and M. J. Harrold, “Empirical evaluation of thetarantula automatic fault-localization technique,” in Procs of the20th IEEE/ACM international Conference on Automated softwareengineering, ’05. New York, NY, US A: ACM, 2005, pp. 273–282.(Paper=65, Status=F, Phase=1)
Y. Kamei, S. Matsumoto, A. Monden, K. i. Matsum ot o,B. Adams, and A. E. Hassan, “Revisiting common bug predic-tion ?ndings using effort-aware models,” in Software Mainte-nance (ICSM), IEEE International Conference on., 2010, pp. 1–10.(Paper=69, Status=P)
S. Kanmani, V. R. Uthariaraj, V. S ankaranarayanan, andP. Th ambidurai, “Object oriented software quality predictionusing general regression neural networks,” SIGSOFT Softw. Eng.Notes, vol. 29, pp. 1–6, September 2004. (Paper=71, Status=F,Phase=2)
S. Kanmani, V. Uthariaraj, V. Sankaranarayanan, and P. Tham-bidurai, “Object-oriented software fault prediction using neuralnetworks,” Information and Software Technology, vol. 49, no. 5, pp.483–492, 2007. (Paper=72, Status=F, Phase=2)
Y. Kastro and A. B ener, “A defect prediction met hod for soft-ware versioning,” Software Quality Journal, vol. 16, no. 4, pp.543–562, 2008. (Paper=73, Status=P)
T. Khoshgoftaar, E. Allen, and J. Busboom, “Modeling soft-ware quality: the software measurement analysis and reliabilitytoolkit,” in Tools with Arti?cial Intelligence, 2000. ICTAI 2000.Proceedings. 12th IEEE International Conf on, 2000, pp.54–61.(Paper=77, Status=F, Phase=2)
T. Khoshgoftaar, E. Geleyn, and K. Gao, “An empirical stud yof the impact of count models predictions on module-ordermodels,” in Software Metrics, 2002. Proceedings. Eighth IEEE Sym-posium on, 2002, pp. 161 – 172. (Paper=79, Status=F, Phase=2)
T. Khoshgoftaar and N. Seliya, “Improving usefulness of soft-ware quality classi?cation models based on boolean discrimi-nant fun ctions,” in Software Reliability Engineering, 2002. ISSRE2003. Proceedings. 13th International Symposium on, 2002, pp. 221– 230. (Paper=80, Status=F, Phase=2)
T. Khoshgoftaar and N. Seliya, “Software quality classi?cationmodeling using the sprint decision tree algorithm,” in Toolswith A rti?cial Intelligence, 2002. (ICTAI 2002). Proceedings. 14thIEEE International Conference on, 2002, pp. 365 – 374. (Paper=81,Status=F, Phase=2)
T. Khoshgoftaar and N. Seliya, “Comparative assessment ofsoftware quality classi?cation techniques: An empirical casestudy,” Empirical Software Engineering, vol. 9, no. 3, pp. 229–257,2004. (Paper=83, Status=P)
T. Khoshgoftaar, N. Seliya, and K. Gao, “Assessment of anew three-group software quality classi?cation technique: Anempirical case study,” Empirical Software Engineering, vol. 10,no. 2, pp. 183–218, 2005. (Paper=84, Status=F, Phase=2)
T. Khoshgoftaar, X. Yuan, E. A llen, W. Jones, and J. Hudepohl,“Uncertain classi?cation of fault-prone software modules,” Em-pirical Software Engineering, vol. 7, n o. 4, pp. 297–318, 2002.(Paper=86, Status=P)
S. Kim, K. Pan, and E. Whitehead Jr, “Memories of bug ?xes,”in Proceedings of the 14th ACM SIGSOFT international symposiumon Foundations of software engineering. ACM, 2006, pp. 35–45.(Paper=87, Status=F, Phase=2)
S. Kim, T. Zimmermann, K. Pan, and E. Whitehead, “Automaticidenti?cation of bug-introducing changes,” in Automated Soft-ware Engineering, ’06. 21st IEEE /ACM International Conference on,sept. 2006, pp. 81 –90. (Paper=89, Status=F, Phase=1)
M. Kläs, H. Nakao, F. Elberzhager, and J. Münch, “Predictingdefect content an d quality assurance effectiveness by combiningexpert judgment and de fe ct data - a case study,” in SoftwareReliability Engineering, 2008. ISSRE 2008. 19th International Sym-posium on, 2008, pp. 17–26. (Paper=91, Status=F, Phase=2)
P. Knab, M. Pinzger, and A. Bernstein, “Predicting d efectdensities in source code ?les with decision tree learners,” inProceedings of the 2006 international workshop on Mining softwarerepositories. ACM, 2006, pp. 119–125. (Paper=92, Status=P)
L. Layman, G. Kudrjavets, and N. Nagappan, “Iterative identi?-cation of fault-prone binaries using in-process m etrics,” in Procsof the Second ACM-IEEE intern’l symp on Empirical software engi-neering and measurement. ACM, 2008, pp. 206–212. (Paper=96,Status=F, Phase=4)
S. Lessmann, B. Baesens, C. Mues, and S. Pietsch, “Bench-marking classi?cation mode ls for software defect prediction: Aproposed framework and novel ?ndings,” Software Engineering,IEEE Trans on, vol. 34, no. 4, pp.485–496, july-aug. 2008. (Pa-per=97, Status=F, Ph ase=2, Data=N)
P. L. Li, J. Herbsleb, M. Shaw, and B. Robinson, “Experiencesand results from initiating ?eld defect prediction and producttest prioritization efforts at abb inc.” in Proceedings of the 28thinternational conference on Software engineering, ser. ICSE ’06. NewYork, NY, USA: ACM, 2006, pp. 413–422. (Paper=98, Status=P)
P. L. Li, M. Shaw, J. Herbsleb, B. Ray, and P. S anthanam,“Empirical evaluation of defect projection models for widely-deployed production software systems,” SIGSOFT Softw. Eng.Notes, vol. 29, pp. 263–272, Oct 2004. (Paper=99, Status=F,Phase=1)
Y. Ma, L. Guo, and B. Cukic, Advances in Machine LearningApplications in Software Engineering. IGI Global, 2006, ch. Astatistical framework for the prediction of fault-proneness, pp.237–265. (Paper=102, Status=F, Phase=2, Data=N)
J. T. Madhavan and E. J. Whitehead, Jr., “Predicting buggychanges inside an integrated development environment,” inProcs of the 2007 OOPSLA workshop on eclipse technology eXchange,ser. New York, NY, USA: ACM, 2007, pp. 36–40. (Paper=103,Status=F, Phase=4)
A. Mahaweerawat, P. Sophatsathit, and C. Lursinsap, “Softwarefault prediction using fuzzy clustering and radial-basis functionnetwork,” in Proceedings of the Inter n ational Conference on Intelli-gent Technologies, InTech/VJFuzzy, 2002, pp. 304–313. (Paper=104,Status=F, Phase=2)
A. Mahaweerawat, P. Sophatsathit, and C. Lursinsap, “Adaptiveself-organizing map clustering for software fault p rediction,” inFourth international joint conference on computer science and software engineering, Thailand, 2007, pp. 35–41. (Paper=105, Status=F,Phase=2)
A. Mahaweerawat, P. Sophatsathit, C. Lursinsap, andP. Musilek, “Fault prediction in object-oriented softwareusing neural network techniques,” in Proceedings of the InTechConference, 2004, 2004, pp. 2–4. (Paper=106, Stat us=F, Phase=2)
T. Mende and R. Koschke, “Revisiting the evaluation of defectprediction m odels,” in Proceedings of the 5th International Con-ference on Predictor Models in Software Engineering. ACM, 2009,p. 7. (Paper=108, Status=F, Phase=2, Data=N)
T. Menzies and J. Di St efano, “How good is your blind spotsampling policy,” in High Assurance Systems Engineering, 2004.Proceedings. Eighth IEEE International Symposium on, march 2004,pp. 129 – 138. (Paper=111, Status=F, Phase=2, Data=N)
T. Menzies, Z. Milton, B. Turhan, B. Cukic, Y. Jiang, andA. B. Bener, “Defect prediction from static code features: cur-rent results, limitations, new approaches,” Autom. Softw. Eng.,vol. 17, no. 4, pp. 375–407, 2010. (Paper=113, Status=F, Phase=2,Data=N)
T. Menzies, B. Turhan, A. Bener, G. Gay, B. Cukic, and Y. Jiang,“Implications of ceiling effects in defect predictors,” in Proceed-ings of the 4th international workshop on Predictor models in softwareengineering, ser. PROMISE ’08. New York, NY, USA: ACM, 2008,pp. 47–54. (Paper=114, Status=F, Phase=2, Data=N)
M. Mertik, M. Lenic, G. Stiglic, and P. Kokol, “Estimatingsoftware quality with advanced data mining techniques,” inSoftware Engineering Advances, International Conference on, oct.2006, p. 19. (Paper=115, Status=F, Phase=2, Data=N)
O. Mizuno, S. Ikami, S. Nakaichi, and T. Kikuno, “Spam ?lterbased approach for ?nding fault-prone software modules,” inMining Software Repositories. ICSE Workshops ’07. Fourth Int’llWorkshop on, may 2007, p. 4. (Paper=116, Status=P)
O. Mizuno and T. Kikuno, “Training on errors experiment todetect fault-prone software modules by spam ?lter,” in P roceed-ings of the the 6th joint meeting of the European software engineeringconference and the ACM SIGSOFT symposium on The foundationsof software engineering, ser. ESEC-FSE ’07. New York, NY, USA:ACM, 2007, pp. 405–414. (Paper=117, Status=P)
R. Moser, W. Pedrycz, and G. Succi, “A comparative analysisof the ef?ciency of change m etrics and static code attributesfor defect prediction,” in Software Engineering. ACM/IEE E 30thInternational Conference on., 2008, pp. 181–190. (Paper=118, Sta-tus=P)
N. Nagappan, T. Ball, and A. Zeller, “Mining metrics to pre-dict component failures,” in Proceedings of the 28th internationalconference on Software engineering, ser. ICSE ’06. New York, NY,USA: ACM, 2006, pp. 452–461. (Paper=122, Status=P)
A. Neufelder, “How to measure the impact of speci?c develop-ment practices on ?elded defect density,” in Software ReliabilityEngineering, 2000. Proceedings. 11th International Symposium on.IEEE, 2000, pp. 148–160. (Paper=124, Status=F, Phase=1)
T. J. Ostrand and E. J. Weyuker, “The distribution of faults ina large industrial software system,” SIGSOFT Softw. Eng. Notes,vol. 27, pp. 55–64, July 2002. (Paper=130, Status=F, Phase=1)
T. J. Ostrand, E. J. Weyuker, and R. M. Bell, “Automatingalgorithms for the identi?cation of fault-prone ?les,” in Pro-ceedings of the 2007 international s ymposium on Software testingand analysis, ser. ISST. NY, USA: ACM, 2007, pp. 219–227.(Paper=132, Status=F, Phase=4)
T. J. Ostrand, E. J. Weyuker, and R. Bell, “Where the bugs are,” inACM SIGSOFT Software Engineering Notes, vol. 29. ACM, 2004,pp. 86–96. (Paper=133, Status=P)
T. Ostrand, E. Weyuker, and R. Bell, “Programmer-based faultprediction,” in Proceedings of the 6th International Conference onPredictive Models in Software Engineering. ACM, 2010, pp. 1–10.(Paper=135, Status=P)
P. Pendharkar, “Exhaustive an d heuristic search approachesfor learning a software defect prediction model,” EngineeringApplications of Arti?cial Intelligence, vol. 23, no. 1, pp. 34–40, 2010.(Paper=141, Status=F, Phase=6, Data=N)
M. Pinzger, N. Nagappan, and B. Murphy, “Can developer-module networks predict failures? ” in Proceedings of the 16thACM SIGSOFT Int’l Symposium on Foundations of software engi-neering. ACM, 2008, pp. 2–12. (Paper=144, St atus=F, Phase=2)
J. Ratzinger, T. Sigmund, and H. C. Gall, “On the relationof refactorings and software defect prediction,” in Proceedingsof the 2008 international working conference on Mining softwarerepositories, ser. MSR ’08, NY ACM, 2008, pp. 35–38. (Paper=147,Status=F, Phase=4)
M. Reformat, A Fuzzy-Based Meta-model for Reasoning about theNumber of Software Defects, ser. Lecture Notes in ComputerScience. Springer, Lecture Notes in Computer Science, 2003, vol.2715. (Paper=148, Status=F, Phase=2)
N. Schneidewind, “Investigation of logistic regression as adiscriminant of software quality,” in Software M etrics Symposium,2001. METRICS 2001. Proceedings. Seventh International, 2001, pp.328 –337. (Paper=152, Status=F, Phase=2)
A. Schröter, T. Zimm ermann, R. Premraj, and A. Zeller, “If yourbug database could talk,” in Proceedings of the 5th internationalsymposium on empirical software engineering, vol. 2, 2006, pp. 18–20. (Paper=153, Status=F, Phase=1)
A. Schröter, T. Zimmerm ann, and A . Zeller, “Predicting com-ponent failures at design time,” in Proceedings of the 2006ACM/IEEE international symposium on Empirical software engineer-ing. ACM, 2006, pp. 18–27. (Paper=154, Status=P)
A. Schröter, T. Zimmermann, R. Premraj, and A. Zeller, “Wheredo bugs come from? ” SIGSOFT Softw. Eng. Notes, vol. 31, pp.1–2, November 2006. (Paper=155, Status=F, Phase=1)
C. Seiffert, T. M. Khoshgoftaar, and J. V. Hulse, “Improvingsoftware-quality predictions with data sampling and boost-ing,” IEEE Transactions on Systems, Man, and Cybernetics, PartA, vol. 39, no. 6, pp. 1283–1294, 2009. (Paper=156, Status=F,Phase=2, Data=N)
R. Shatnawi and W. Li, “T he effectiveness of software metricsin identifying error-prone classes in post-release software evo-lution process,” Journal of Systems and Software, vol. 81, no. 11,pp. 1868–1882, 2008. (Paper=160, Status=P)
M. Sherriff, S. S. Heckman, M. Lake, and L. Williams, “Identify-ing fault-prone ?les using static analysis alerts through singularvalue decomposition,” in Proceedings of the 2007 conference of thecenter for advanced studies on Collaborative research, ser. CASCON’07. New York, NY, USA: ACM, 2007, pp. 276–279. (Paper=161,Status=F, Phase=2)
M. Sherriff, N. Nagappan, L. Williams, and M. Vouk, “Earlyestimation of defect density using an in-process haskell metricsmodel,” SIGSOFT Softw. Eng. Notes, vol. 30, pp. 1–6, May 2005.(Paper=162, Status=F, Phase=1)
Y. Singh, A. Kaur, and R. Malhotra, “Predicting software faultproneness model using neural network,” Product-Focused Soft-ware Process Improvement, v ol. 5089, pp. 204–214, 2008. (Pa-per=166, Status=F, Phase=2, Data=N)
Y. Singh, A. Kaur, and R. Malhotra, “Empirical validation ofobject-oriented metrics for predicting fault proneness models,”Software Quality Journal, vol. 18, no. 1, pp. 3–35, 2010. (Pa-per=167, Status=F, Phase=2, Data=N)
C. Stringfellow and A. Andrews, “Deriving a fault architectureto guide testing,” Software Quality Journal, vol. 10, no. 4, pp.299–330, 2002. (Paper=169, S tatus=F, Phase=1)
G. Succi, W. Pedrycz, M. Stefanovic, and J. Miller, “Practical as-sessment of t he models for identi?cation of defect-prone classesin object-oriented commercial systems using design metrics,” Jof Systems and Software, vol. 65, no. 1, pp1–12, 2003. (Paper=170,Status=F, Phase=1)
M. D. M. Suf?an and M. R. Abdullah, “Establishing a defectprediction model using a combination of product metrics aspredictors via six sigma methodology, ” in Information Technol-ogy (ITSim), International Symp in, vol. 3, 2010, pp. 1087–1092.(Paper=171, Status=F, Phase=2)
P. Tomaszewski, H. Grahn, and L. Lundberg, “A method foran accurate early prediction of faults in modi?ed classes,” inSoftware M aintenance, ’22nd IEEE International Conference on, sept.2006, pp. 487 –496. (Paper=173, Status=F, Phase=2)
A. Tosun, B. Turhan, and A. Bener, “Practical considerationsin deploying ai for defect prediction: a case study within theturkish telecommunication industry,” in Proceedings of the 5thInternational Conference on Predictor Models in Software Engineer-ing. ACM, 2009, p. 11. (Paper=175, Status=F, Phase=2, Data=N)
A. Tosun, A. B. Bener, B. Turhan, and T. Menzies, “Practicalconsiderations in deploying statistical methods for defect pre-diction: A case study within the turkish telecommunications 26industry,” Information and Software Technology, vol. 52, no. 11,pp. 1242–1257, 2010. (Paper=176, Status=F, Phase=2, Data=N)
B . Turhan, G. Kocak, and A. Bener, “Data mining source codefor locating software bugs: A case stud y in telecommunicationindustry,” Expert Systems with Applications, vol. 36, no. 6, pp.9986–9990, 2009. (Paper=179, Status=F, Phase=2, Data=N)
B . Turhan, A. B. Bener, and T. Menzies, “Regularities in learningdefect predictors,” in P roduct-Focused Software Process Improve-ment, 11th International Conference, PROFES 2010, M. A. Babar,M. Vierimaa, an d M. Oivo, Ed s., vol. 6156. Limerick, Ireland,June 21-23: Springer. series Lecture Notes in Business Information Processing, 2010, pp. 116–130. (Paper=180, Status=F,Phase=4, Data=N)
B . Turhan, T. Menzies, A. Bener, and J. Di Stefano, “On therelative value of cross-company and within-company data fordefect prediction,” Empirical Software Engineering, vol. 14, no. 5,pp. 540–578, 2009. (Paper=181, Status=F, Phase=2, Data=N)
O. Vandecruys, D. Martens, B. Baesens, C. Mues, M. De Backer,and R. Haesen, “Mining software repositories for comprehen-sible software fault prediction models,” Journal of Systems andSoftware, vol. 81, no. 5, pp. 823–839, 2008. (Paper=182, Status=F,Phase=2, Data=N)
E . Weyuker, T. Ostrand, and R. Bell, “Comparing negative bino-mial and recursive partitioning models for fault prediction,” inProceedings of the 4th international workshop on Predictor models insoftware engineering. ACM, 2008, pp. 3–10. (Paper=189, Status=F,Phase=2)
E . Weyuker, T. Ostrand, and R. Bell, “Do too many cooks spoilthe broth? using the number of developers to enhance defectprediction models,” Empirical S oftware Engineering, vol. 13, no. 5,pp. 539–559, 2008. (Paper=190, Status=P)
E . J. Weyuker, T. J. Ostrand, and R. M. Bell, “Comparing theeffectiveness of several modeling methods for fault prediction,”Empirical S oftware Engineering, vol. 15, no. 3, pp. 277–295, 2010.(Paper=191, Status=F, Phase=2)
C. Wohlin, M. Host, and M. Ohlsson, “Understanding thesources of software defects: a ?ltering approach,” in ProgramComprehension, 2000. Proceedings. IWPC 2000. 8th InternationalWorkshop on, 2000, pp. 9 –17. (Paper=192, Status=F, Phase=1)
B. Yang, L. Yao, and H.-Z. Huang, “Early software qualityprediction based on a fuzzy neural network model,” in NaturalComputation, 2007. ICNC 2007. Third International Conference on,vol. 1, aug. 2007, pp. 760 –764. (Paper=195, Status=F, Phase=2)
L. Yi, T. M. Khoshgoftaar, and N. Seliya, “Evolutionary opti-mization of software quality modeling with multiple reposito-ries,” Software Engineering, IEEE Transactions on, vol. 36, no. 6,pp. 852–864, 2010. (Paper=196, St atus=F, Phase=2, Data=N)
X. Yuan, T. Khoshgoftaar, E. Allen, and K. Gan esan, “An ap-plication of fuzzy clustering to software quality prediction,” inApplication-Speci?c Systems and Software Engineering Technology.Procs. 3rd IEEE Symposium on, 2000, pp85–90. (Paper=199, Sta-tus=F, Phase=2)
H. Zhan g , A. Nelson, and T. Menzies, “On the value of learningfrom defect dense component s for software defect prediction,”in Proceedings of the 6th International Conference on PredictiveModels in Software Engineering, PROMISE 2010, T. Menzies andG. Koru, Eds. Timisoara, Romania, September 12-13, 2010:ACM, 2010, p. 14. (Paper=200, S tatus=F, Phase=2, Data=N)
S. Zhong, T. Khoshgoftaar, and N. Seliya, “Unsupervised learn-ing for expert-based software quality estimation,” in HighAssurance Systems Engineering, 2004. Proceedings. Eighth IEEEInternational Sym posium on, march 2004, pp149–155. (Paper=201,Status=F, Phase=2, Data=N)
Y. Zhou, B. Xu, and H. Leun g , “On the ability of complexitymetrics to predict fault-prone classes in object-oriented sys-tems,” Journal of Systems and Software, vol. 83, no. 4, pp. 660–674,2010. (Paper=203, Status=P)
T. Zimmerm ann and N. Nagappan, “Predicting subsystem fail-ures using dependency graph complexities,” in Software Relia-bility, 2007. ISSRE ’07. The 18th IEEE International Symposium on,nov. 2007, pp. 227 –236. (Paper=204, Status=F, Phase=2)
T. Zimmermann, N. Nagappan, H. Gall, E. Giger, and B. Mur-phy, “Cross-proj ect defect prediction: a large scale experimenton data v s. domain vs. process,” in Proceedings of the the 7thjoint meeting of the European software engineering conference andthe ACM SIGSOFT symposium on The foundations of softwareengineering, ser. ESEC/FSE ’09. New York, 2009, pp. 91–100.(Paper=208, Status=F, Phase=4)